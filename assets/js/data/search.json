[ { "title": "Insecure Direct Object Reference", "url": "/posts/idor/", "categories": "Basics, Web", "tags": "bugbounty", "date": "2022-08-01 08:00:00 +0000", "snippet": "What it isIDOR (Insecure Direct Object Reference) doesn’t feel like a real big threat. In fact, as part of A01:2021 – Broken Access Control from the OWASP Top 10, it‘s actually more common than you think.IDOR occurs when an application exposing a reference of an internal object or information to the outer world. This could be a direct record identifier of a database or a specific filename pattern on the server‘s system storage. IDOR itself do not bring a direct security issue to your application but it help‘s an attacker to enumerate the structure of your application/objects. With this information an attacker could try to probe access to the associated objects. Because of that, an IDOR issue is only exploitable in combination with an access control security flaw.How it looks likeImagin you have an account for your local corona test center. On it‘s website you can create calendar events for testing and retrieve your results later. Maybe your url path to your result is something like:https://testcenter.local/results?result_id=123456This URL looks suspicious. The result_id could be a random number or it might be a kind of increment. By changing the result_id to something like 123457 you got a test result from another person including personal information. Sounds too easy to be a really big security flaw?Indeed this was a big thing in SafePlay, a software solution for covid-19 tests from medicus.ai. According to the CCC, over 136,000 test results from more than 80,000 customers at over 100 test centers and mobile test teams were leaked in 2021.PreventionThere as several ways to prevent IDOR attacks. An easy step is to not use increments as object identifiers or not exposing them to your customers (but than they are still guessable). Using UUID as identifiers make them not guessable because they generated randomly. Randomness could also achieved by hashing (with salt) the object identifiers before exposing it. Another way is to setup authentication properly so that an user can only access his own data." } ]
